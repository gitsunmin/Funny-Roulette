/* generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "svelte/internal";

import browser from "webextension-polyfill";
import User from "./pages/User.svelte";
import UserController from "./pages/UserController.svelte";
import MyInfo from "./pages/myInfo.svelte";
import Roulette from "./pages/Roulette.svelte";
import Resulte from "./pages/Resulte.svelte";
import Error from "./pages/Error.svelte";

// import { beforeUpdate, afterUpdate, onMount, onDestroy, createEventDispatcher } from "svelte";
import { uuidv4, deepCopy, reload } from "./api/commonFunctions.js";

function add_css() {
	var style = element("style");
	style.id = "svelte-qcubvj-style";
	style.textContent = "header.svelte-qcubvj.svelte-qcubvj{margin:0px;padding:5px 0px;height:25px;background-color:#f5d042;text-align:center}header.svelte-qcubvj>h1.svelte-qcubvj{margin:0px}section.svelte-qcubvj.svelte-qcubvj{background-color:#0a174e;margin:0px;padding:10px 0px 0px 0px;height:calc(100% - 35px)}footer.svelte-qcubvj.svelte-qcubvj{margin:0px;padding:0px;height:35px;background-color:#f5d042}";
	append(document.head, style);
}

// (83:2) {:else}
function create_else_block(ctx) {
	let error;
	let current;
	error = new Error({});

	return {
		c() {
			create_component(error.$$.fragment);
		},
		m(target, anchor) {
			mount_component(error, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(error.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(error.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(error, detaching);
		}
	};
}

// (81:28) 
function create_if_block_2(ctx) {
	let resulte;
	let current;

	resulte = new Resulte({
			props: { selectedUser: /*selectedUser*/ ctx[3] }
		});

	resulte.$on("onGoBackPage", /*onGoBackPage*/ ctx[10]);

	return {
		c() {
			create_component(resulte.$$.fragment);
		},
		m(target, anchor) {
			mount_component(resulte, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const resulte_changes = {};
			if (dirty & /*selectedUser*/ 8) resulte_changes.selectedUser = /*selectedUser*/ ctx[3];
			resulte.$set(resulte_changes);
		},
		i(local) {
			if (current) return;
			transition_in(resulte.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(resulte.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(resulte, detaching);
		}
	};
}

// (79:28) 
function create_if_block_1(ctx) {
	let roulette;
	let current;
	roulette = new Roulette({ props: { userList: /*userList*/ ctx[0] } });
	roulette.$on("onSelectedUser", /*onSelectedUser*/ ctx[6]);
	roulette.$on("onGoBackPage", /*onGoBackPage*/ ctx[10]);

	return {
		c() {
			create_component(roulette.$$.fragment);
		},
		m(target, anchor) {
			mount_component(roulette, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const roulette_changes = {};
			if (dirty & /*userList*/ 1) roulette_changes.userList = /*userList*/ ctx[0];
			roulette.$set(roulette_changes);
		},
		i(local) {
			if (current) return;
			transition_in(roulette.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(roulette.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(roulette, detaching);
		}
	};
}

// (67:2) {#if pageCount === 1}
function create_if_block(ctx) {
	let user;
	let t;
	let usercontroller;
	let current;

	user = new User({
			props: {
				userList: /*userList*/ ctx[0],
				userName: /*userName*/ ctx[2]
			}
		});

	user.$on("onAddUser", /*onAddUser*/ ctx[4]);
	user.$on("onInputUserName", /*onInputUserName*/ ctx[5]);
	user.$on("onRemoveUser", /*onRemoveUser*/ ctx[7]);
	usercontroller = new UserController({});
	usercontroller.$on("onClearUser", /*onClearUser*/ ctx[8]);
	usercontroller.$on("goRoulettePage", /*goRoulettePage*/ ctx[9]);

	return {
		c() {
			create_component(user.$$.fragment);
			t = space();
			create_component(usercontroller.$$.fragment);
		},
		m(target, anchor) {
			mount_component(user, target, anchor);
			insert(target, t, anchor);
			mount_component(usercontroller, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const user_changes = {};
			if (dirty & /*userList*/ 1) user_changes.userList = /*userList*/ ctx[0];
			if (dirty & /*userName*/ 4) user_changes.userName = /*userName*/ ctx[2];
			user.$set(user_changes);
		},
		i(local) {
			if (current) return;
			transition_in(user.$$.fragment, local);
			transition_in(usercontroller.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(user.$$.fragment, local);
			transition_out(usercontroller.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(user, detaching);
			if (detaching) detach(t);
			destroy_component(usercontroller, detaching);
		}
	};
}

function create_fragment(ctx) {
	let header;
	let t1;
	let section;
	let current_block_type_index;
	let if_block;
	let t2;
	let footer;
	let myinfo;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*pageCount*/ ctx[1] === 1) return 0;
		if (/*pageCount*/ ctx[1] === 2) return 1;
		if (/*pageCount*/ ctx[1] === 3) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	myinfo = new MyInfo({});

	return {
		c() {
			header = element("header");
			header.innerHTML = `<h1 class="svelte-qcubvj">Funny Roulette</h1>`;
			t1 = space();
			section = element("section");
			if_block.c();
			t2 = space();
			footer = element("footer");
			create_component(myinfo.$$.fragment);
			attr(header, "class", "svelte-qcubvj");
			attr(section, "class", "pages svelte-qcubvj");
			attr(footer, "class", "svelte-qcubvj");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			if_blocks[current_block_type_index].m(section, null);
			insert(target, t2, anchor);
			insert(target, footer, anchor);
			mount_component(myinfo, footer, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(section, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(myinfo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(myinfo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			if (detaching) detach(t1);
			if (detaching) detach(section);
			if_blocks[current_block_type_index].d();
			if (detaching) detach(t2);
			if (detaching) detach(footer);
			destroy_component(myinfo);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let userList = [];

	try {
		browser.storage.local.get(["userList"]).then(res => {
			$$invalidate(0, userList = deepCopy(res.userList));
		});
	} catch(error) {
		console.error(error);
		reload();
	}

	let pageCount = 1;
	let userName = "";
	let selectedUser = {};

	function goPage(count) {
		$$invalidate(1, pageCount = count);
	}

	function onAddUser({ detail: userName }) {
		const user = { id: uuidv4(), name: userName };
		userList.push(user);
		browser.storage.local.set({ userList });
		$$invalidate(0, userList);
	}

	function onInputUserName({ detail: value }) {
		$$invalidate(2, userName = value);
	}

	function onSelectedUser({ detail: user }) {
		$$invalidate(3, selectedUser = user);
		goPage(3);
	}

	function onRemoveUser({ detail: user }) {
		const removedIndex = userList.findIndex(u => u.id === user.id);

		if (removedIndex > -1) {
			userList.splice(removedIndex, 1);
			browser.storage.local.set({ userList });
		}

		reload();
	}

	function onClearUser() {
		browser.storage.local.clear();
		reload();
	}

	function goRoulettePage() {
		if (userList.length) goPage(2);
	}

	function onGoBackPage() {
		$$invalidate(1, pageCount -= 1);
	}

	return [
		userList,
		pageCount,
		userName,
		selectedUser,
		onAddUser,
		onInputUserName,
		onSelectedUser,
		onRemoveUser,
		onClearUser,
		goRoulettePage,
		onGoBackPage
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-qcubvj-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;